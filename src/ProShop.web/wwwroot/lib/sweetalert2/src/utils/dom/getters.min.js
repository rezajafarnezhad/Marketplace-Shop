/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/sweetalert2@11.4.8/src/utils/dom/getters.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{swalClasses}from"../classes.js";import{toArray,uniqueArray}from"../utils.js";import{hasClass,isVisible}from"./domUtils.js";export const getContainer=()=>document.body.querySelector(`.${swalClasses.container}`);export const elementBySelector=e=>{const s=document.body.querySelector(`.${swalClasses.container}`);return s?s.querySelector(e):null};const elementByClass=e=>elementBySelector(`.${e}`);export const getPopup=()=>elementByClass(swalClasses.popup);export const getIcon=()=>elementByClass(swalClasses.icon);export const getTitle=()=>elementByClass(swalClasses.title);export const getHtmlContainer=()=>elementByClass(swalClasses["html-container"]);export const getImage=()=>elementByClass(swalClasses.image);export const getProgressSteps=()=>elementByClass(swalClasses["progress-steps"]);export const getValidationMessage=()=>elementByClass(swalClasses["validation-message"]);export const getConfirmButton=()=>elementBySelector(`.${swalClasses.actions} .${swalClasses.confirm}`);export const getDenyButton=()=>elementBySelector(`.${swalClasses.actions} .${swalClasses.deny}`);export const getInputLabel=()=>elementByClass(swalClasses["input-label"]);export const getLoader=()=>elementBySelector(`.${swalClasses.loader}`);export const getCancelButton=()=>elementBySelector(`.${swalClasses.actions} .${swalClasses.cancel}`);export const getActions=()=>elementByClass(swalClasses.actions);export const getFooter=()=>elementByClass(swalClasses.footer);export const getTimerProgressBar=()=>elementByClass(swalClasses["timer-progress-bar"]);export const getCloseButton=()=>elementByClass(swalClasses.close);const focusable='\n  a[href],\n  area[href],\n  input:not([disabled]),\n  select:not([disabled]),\n  textarea:not([disabled]),\n  button:not([disabled]),\n  iframe,\n  object,\n  embed,\n  [tabindex="0"],\n  [contenteditable],\n  audio[controls],\n  video[controls],\n  summary\n';export const getFocusableElements=()=>{const e=toArray(getPopup().querySelectorAll('[tabindex]:not([tabindex="-1"]):not([tabindex="0"])')).sort(((e,s)=>{const t=parseInt(e.getAttribute("tabindex")),o=parseInt(s.getAttribute("tabindex"));return t>o?1:t<o?-1:0})),s=toArray(getPopup().querySelectorAll(focusable)).filter((e=>"-1"!==e.getAttribute("tabindex")));return uniqueArray(e.concat(s)).filter((e=>isVisible(e)))};export const isModal=()=>hasClass(document.body,swalClasses.shown)&&!hasClass(document.body,swalClasses["toast-shown"])&&!hasClass(document.body,swalClasses["no-backdrop"]);export const isToast=()=>getPopup()&&hasClass(getPopup(),swalClasses.toast);export const isLoading=()=>getPopup().hasAttribute("data-loading");
//# sourceMappingURL=/sm/0b3eefd6aee5339e9e911256d1b30d2734a09773ef847b040fd89e5fa7c7350f.map